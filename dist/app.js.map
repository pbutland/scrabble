{
  "version": 3,
  "sources": ["../src/tile-utils.ts", "../src/app.ts"],
  "sourcesContent": ["// Simple utilities for handling letters in words for Scrabble tiles\n\n/**\n * Process a word or phrase to convert to Scrabble tiles\n * @param wordOrPhrase The word or phrase to process\n * @returns false if input contains invalid characters, or an array of uppercase letters \n * with '_SPACE_' markers for spaces between words\n */\nexport function convertToTiles(wordOrPhrase: string): string[][] | false {\n  // Only allow A-Z letters (case insensitive) and spaces\n  if (!/^[a-zA-Z\\s]*$/.test(wordOrPhrase)) {\n    return false;\n  }\n  \n  // Convert to a single array of letters and space markers\n  const result: string[] = [];\n  \n  for (const char of wordOrPhrase) {\n    if (char === ' ') {\n      // Skip consecutive spaces\n      if (result.length > 0 && result[result.length - 1] !== '_SPACE_') {\n        result.push('_SPACE_');\n      }\n    } else {\n      // Convert to uppercase letter\n      result.push(char.toUpperCase());\n    }\n  }\n  \n  // Return empty result for empty input\n  if (result.length === 0) return false;\n  \n  // Return the result as a 2D array for compatibility with existing code\n  return [result];\n}\n", "// Scrabble tile visualizer application\nimport { convertToTiles } from './tile-utils';\n\n// Function to modify SVG content to make it responsive and theme-aware\nfunction makeSvgResponsive(svgContent: string): string {\n    return svgContent\n        .replace(/<rect([^>]*)fill=\"white\"/, '<rect$1fill=\"var(--bg-color)\"')\n        .replace(/<text([^>]*?)>([^<]*)<\\/text>/g, '<text$1 fill=\"var(--text-color)\">$2</text>')\n        .replace(/<svg([^>]*)/, '<svg$1 class=\"tile-svg-content\"')\n        .replace(/stroke=\"black\"/g, 'stroke=\"var(--text-color)\"');\n}\n\n// Function to create a downloadable SVG from a permutation row\nfunction downloadPermutationAsSVG(permutationRow: HTMLElement, word: string): void {\n    // Get all word containers in the permutation row\n    const wordContainers = permutationRow.querySelectorAll('.tile-word');\n    if (!wordContainers.length) return;\n    \n    // Get all SVG elements for validation\n    const allSvgElements = permutationRow.querySelectorAll('.tile-svg-content');\n    if (!allSvgElements.length) return;\n    \n    // Helper function to get original SVG dimensions\n    const getOriginalSvgDimensions = (svgElement: SVGSVGElement): { width: number, height: number } => {\n        // Parse the SVG content\n        const svgString = new XMLSerializer().serializeToString(svgElement);\n        const parser = new DOMParser();\n        const svgDoc = parser.parseFromString(svgString, 'image/svg+xml');\n        const originalSvg = svgDoc.documentElement;\n        \n        // Try to get width and height from attributes first\n        let width = parseFloat(originalSvg.getAttribute('width') || '0');\n        let height = parseFloat(originalSvg.getAttribute('height') || '0');\n        \n        // If not available, try to get from viewBox\n        if (width === 0 || height === 0) {\n            const viewBox = originalSvg.getAttribute('viewBox');\n            if (viewBox) {\n                const parts = viewBox.split(/\\s+|,/).map(parseFloat);\n                if (parts.length === 4) {\n                    width = parts[2];\n                    height = parts[3];\n                }\n            }\n        }\n        \n        // Use fallback values if still not available\n        if (width === 0) width = 100;\n        if (height === 0) height = 100;\n        \n        return { width, height };\n    };\n    \n    // Calculate dimensions based on the SVG elements\n    let totalWidth = 0;\n    let maxHeight = 0;\n    let wordCount = 0;\n    \n    // First pass to calculate max height across all elements\n    allSvgElements.forEach((svg: Element) => {\n        const svgElement = svg as SVGSVGElement;\n        const { height } = getOriginalSvgDimensions(svgElement);\n        maxHeight = Math.max(maxHeight, height);\n    });\n    \n    // Calculate total width, considering word grouping\n    wordContainers.forEach((wordContainer) => {\n        const wordSvgElements = wordContainer.querySelectorAll('.tile-svg-content');\n        if (wordSvgElements.length > 0) {\n            wordCount++;\n            let wordWidth = 0;\n            \n            // Calculate width for this word\n            wordSvgElements.forEach((svg: Element) => {\n                const svgElement = svg as SVGSVGElement;\n                const { width } = getOriginalSvgDimensions(svgElement);\n                wordWidth += width;\n            });\n            \n            // Add spacing between elements within the word\n            wordWidth += (wordSvgElements.length - 1) * 10;\n            \n            totalWidth += wordWidth;\n        }\n    });\n    \n    // Add some padding\n    totalWidth += 20;  // 10px padding on each side\n    \n    // Add extra spacing between words (20px between words)\n    if (wordCount > 1) {\n        totalWidth += (wordCount - 1) * 20;\n    }\n    \n    // Account for the extra spacing that's added after the last element of each word\n    // When positioning elements, we add extra 10px spacing after every element including the last one\n    // but that space isn't needed for the last element in each word\n    totalWidth += wordCount * 10;\n    \n    maxHeight += 20;   // 10px padding on top and bottom\n    \n    // Start creating the combined SVG\n    const combinedSvg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n    combinedSvg.setAttribute('width', totalWidth.toString());\n    combinedSvg.setAttribute('height', maxHeight.toString());\n    combinedSvg.setAttribute('viewBox', `0 0 ${totalWidth} ${maxHeight}`);\n    combinedSvg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n    \n    // Group to hold all the elements\n    const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    \n    // Current X position for placing elements\n    let currentX = 10;  // Start with 10px padding\n    \n    // Process each word container and its SVG elements\n    wordContainers.forEach((wordContainer) => {\n        const wordSvgElements = wordContainer.querySelectorAll('.tile-svg-content');\n        if (wordSvgElements.length === 0) return;\n        \n        // Create a group for this word\n        const wordGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n        group.appendChild(wordGroup);\n        \n        // Starting X position for elements within this word\n        const wordStartX = currentX;\n        let wordCurrentX = 0;\n        \n        // Process each SVG element in this word\n        wordSvgElements.forEach((svg: Element) => {\n            const svgElement = svg as SVGSVGElement;\n            const { width, height } = getOriginalSvgDimensions(svgElement);\n        \n            // Get the original SVG's XML content\n            const svgString = new XMLSerializer().serializeToString(svgElement);\n            \n            // Parse the original SVG content as a document\n            const parser = new DOMParser();\n            const svgDoc = parser.parseFromString(svgString, 'image/svg+xml');\n            const originalSvg = svgDoc.documentElement;\n            \n            // Extract content from original SVG directly\n            // Most element SVGs have their content in a g tag\n            let contentElement = originalSvg.querySelector('g');\n            \n            // Element position within the word group\n            const elementX = wordStartX + wordCurrentX;\n            \n            if (contentElement) {\n                // Clone the content element\n                const clonedContent = contentElement.cloneNode(true) as Element;\n                \n                // Apply necessary transformations to position the element\n                const currentTransform = clonedContent.getAttribute('transform') || '';\n                clonedContent.setAttribute('transform', \n                    `translate(${elementX}, ${(maxHeight - height) / 2}) ${currentTransform}`);\n                \n                // Add to the word group\n                wordGroup.appendChild(clonedContent);\n            } else {\n                // If no g tag found, create a group for this element\n                const newGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n                newGroup.setAttribute('transform', `translate(${elementX}, ${(maxHeight - height) / 2})`);\n                \n                // Copy all child nodes except the svg tag itself\n                Array.from(originalSvg.childNodes).forEach(child => {\n                    if (child.nodeType === Node.ELEMENT_NODE && (child as Element).tagName.toLowerCase() !== 'svg') {\n                        const importedNode = document.importNode(child, true);\n                        newGroup.appendChild(importedNode);\n                    }\n                });\n                \n                // Add to the word group\n                wordGroup.appendChild(newGroup);\n            }\n            \n            wordCurrentX += width + 10;  // Add spacing between elements within the word\n        });\n        \n        // Move to the next word's starting position (with extra spacing between words)\n        currentX += wordCurrentX + 20;  // Add extra space (20px) between words\n    });\n    \n    combinedSvg.appendChild(group);\n    \n    // Convert SVG to a data URI\n    const svgData = new XMLSerializer().serializeToString(combinedSvg);\n    const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });\n    const svgUrl = URL.createObjectURL(svgBlob);\n    \n    // Create a download link\n    const downloadLink = document.createElement('a');\n    downloadLink.href = svgUrl;\n    downloadLink.download = `${word.replace(/\\s+/g, '-')}-tiles.svg`;\n    \n    // Trigger download\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n    \n    // Clean up the URL object\n    setTimeout(() => {\n        URL.revokeObjectURL(svgUrl);\n    }, 100);\n}\n\n// Function to create a shareable URL and copy to clipboard\nfunction shareUrl(word: string): void {\n    // Create URL with the current word as a parameter\n    const url = new URL(window.location.href);\n    url.search = new URLSearchParams({ word }).toString();\n    \n    // Copy to clipboard\n    navigator.clipboard.writeText(url.toString())\n        .then(() => {\n            // Show toast notification\n            const toast = document.getElementById('toast');\n            if (toast) {\n                toast.classList.add('show');\n                \n                // Hide toast after 3 seconds\n                setTimeout(() => {\n                    toast.classList.remove('show');\n                }, 3000);\n            }\n        })\n        .catch(err => {\n            console.error('Failed to copy URL: ', err);\n            alert('Failed to copy the share link to clipboard.');\n        });\n}\n\n// Theme management\nfunction setTheme(theme: 'light' | 'dark'): void {\n    if (theme === 'dark') {\n        document.body.classList.add('dark-mode');\n    } else {\n        document.body.classList.remove('dark-mode');\n    }\n}\n\n// Function to get URL query parameters\nfunction getQueryParam(param: string): string | null {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.get(param);\n}\n\n// Function to process word input\nfunction processWordInput(word: string, elementContainer: HTMLElement, resultDiv: HTMLElement): void {\n    // Clear previous results\n    elementContainer.innerHTML = '';\n    resultDiv.textContent = '';\n    \n    // Get share button\n    const shareButton = document.getElementById('share-button') as HTMLButtonElement;\n    \n    // Disable the share button by default\n    if (shareButton) {\n        shareButton.disabled = true;\n    }\n    \n    if (!word) {\n        return;\n    }\n    \n    // Check if the word/phrase can be visualized with Scrabble tiles\n    const tilePermutations = convertToTiles(word);\n    \n    if (tilePermutations && tilePermutations.length > 0) {\n        // Word/phrase can be visualized with Scrabble tiles\n        resultDiv.textContent = ``;\n        \n        // Enable the share button\n        if (shareButton) {\n            shareButton.disabled = false;\n        }\n        \n        // Create a map to cache SVGs so we don't reload them for each permutation\n        const svgCache: Record<string, string> = {};\n        \n        // Process each permutation\n        tilePermutations.forEach((tilePath, permutationIndex) => {\n            // Create a container for this permutation\n            const permutationRow = document.createElement('div');\n            permutationRow.className = 'permutation-row';\n            \n            elementContainer.appendChild(permutationRow);\n            \n            // Define the result type to handle different cases\n            type ElementResult = \n                | { element: string; isSpace: true; }\n                | { element: string; svgContent: string; }\n                | { element: string; error: true; };\n                \n            // Array to store promises for this permutation's SVG loads\n            const loadPromises = tilePath.map(letter => {\n                // Skip processing for space markers - will be handled later\n                if (letter === '_SPACE_') {\n                    return Promise.resolve({\n                        element: '_SPACE_',\n                        isSpace: true as const\n                    });\n                }\n                \n                // Use cached SVG if available\n                if (svgCache[letter]) {\n                    return Promise.resolve({\n                        element: letter,\n                        svgContent: svgCache[letter]\n                    });\n                }\n                \n                // Fetch the SVG from the tiles directory\n                return fetch(`./tiles/${letter}.svg`)\n                    .then(response => {\n                        if (!response.ok) {\n                            throw new Error(`SVG for ${letter} not found`);\n                        }\n                        return response.text();\n                    })\n                    .then(svgContent => {\n                        // Cache the SVG\n                        svgCache[letter] = svgContent;\n                        return {\n                            element: letter,\n                            svgContent\n                        };\n                    })\n                    .catch(error => {\n                        console.error(error);\n                        return {\n                            element: letter,\n                            error: true as const\n                        };\n                    });\n            });\n            \n            // When all SVGs for this permutation are loaded, add them to the container in the correct order\n            Promise.all(loadPromises)\n                .then((results: ElementResult[]) => {\n                    // Group elements into words\n                    let currentWord = document.createElement('div');\n                    currentWord.className = 'tile-word';\n                    permutationRow.appendChild(currentWord);\n                    \n                    results.forEach(result => {\n                        // Handle space marker - create a new word container\n                        if ('isSpace' in result && result.isSpace) {\n                            currentWord = document.createElement('div');\n                            currentWord.className = 'tile-word';\n                            permutationRow.appendChild(currentWord);\n                            return;\n                        }\n                        \n                        const elementDiv = document.createElement('div');\n                        elementDiv.className = 'tile-svg';\n                        \n                        if ('error' in result && result.error) {\n                            elementDiv.textContent = `Error loading ${result.element}`;\n                        } else if ('svgContent' in result) {\n                            // Make SVG responsive\n                            elementDiv.innerHTML = makeSvgResponsive(result.svgContent);\n                        }\n                        \n                        // Add the element to the current word container\n                        currentWord.appendChild(elementDiv);\n                    });\n                    \n                    // Add download button for this permutation\n                    const downloadButton = document.createElement('button');\n                    downloadButton.className = 'download-svg-button';\n                    downloadButton.title = 'Download SVG';\n                    downloadButton.innerHTML = `\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" fill=\"currentColor\" viewBox=\"0 0 16 16\">\n                            <path d=\"M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z\"/>\n                            <path d=\"M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z\"/>\n                        </svg>\n                    `;\n                    permutationRow.appendChild(downloadButton);\n                    \n                    // Set up download button click handler\n                    downloadButton.addEventListener('click', () => {\n                        downloadPermutationAsSVG(permutationRow, word);\n                    });\n                });\n        });\n    } else {\n        // Word/phrase contains invalid characters\n        resultDiv.textContent = `\"${word}\" contains invalid characters. Only letters A-Z and spaces are allowed.`;\n        \n        // Keep share button disabled since the input is invalid\n        if (shareButton) {\n            shareButton.disabled = true;\n        }\n    }\n}\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', () => {\n    const form = document.getElementById('word-form') as HTMLFormElement;\n    const wordInput = document.getElementById('word-input') as HTMLInputElement;\n    const resultDiv = document.getElementById('result') as HTMLDivElement;\n    const elementContainer = document.getElementById('tile-container') as HTMLDivElement;\n    const themeRadios = document.querySelectorAll('input[name=\"theme\"]') as NodeListOf<HTMLInputElement>;\n    const shareButton = document.getElementById('share-button') as HTMLButtonElement;\n    \n    // Check for query parameter 'word'\n    const wordFromParam = getQueryParam('word');\n    \n    // Set up theme toggle event listeners\n    themeRadios.forEach(radio => {\n        radio.addEventListener('change', (e) => {\n            const target = e.target as HTMLInputElement;\n            setTheme(target.value as 'light' | 'dark');\n        });\n    });\n    \n    // Set up share button click handler\n    shareButton.addEventListener('click', () => {\n        // Only proceed if button is not disabled\n        if (!shareButton.disabled) {\n            const inputText = wordInput.value.trim();\n            if (inputText) {\n                shareUrl(inputText);\n            }\n        }\n    });\n    \n    // Prevent default form submission but still keep the form for accessibility\n    form.addEventListener('submit', (e) => {\n        e.preventDefault();\n    });\n    \n    // Process input as user types\n    wordInput.addEventListener('input', () => {\n        const inputText = wordInput.value.trim();\n        processWordInput(inputText, elementContainer, resultDiv);\n    });\n    \n    // If there's a word parameter in the URL, use it to auto-populate input field\n    if (wordFromParam) {\n        wordInput.value = wordFromParam;\n        processWordInput(wordFromParam, elementContainer, resultDiv);\n    } else {\n        // Ensure share button is disabled initially\n        shareButton.disabled = true;\n    }\n});\n"],
  "mappings": "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",
  "names": []
}
